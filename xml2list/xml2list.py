"""This script converts an NMR peak list file generated by TopSpin [XML]
to a peak list file to be read by Poky/Sparky [LIST].
"""

import argparse
import xml.etree.ElementTree as ET


def parse_arguments():
    """Validate input arguments

    Returns
    ----------
    args : argparse obj
        Parsed command-line arguments.
    """
    parser = argparse.ArgumentParser(
        description='Convert an NMR peak list file from XML to LIST format.')
    parser.add_argument('xml_file', type=str, help='Input XML file')
    parser.add_argument(
        "--listfile",
        type=str,
        default="out.list",
        help="Path to the output LIST file.")

    args = parser.parse_args()

    if not args.xml_file.endswith('xml'):
        parser.error("Input file must be in XML format.")

    return args


def parse_xml(xml_file):
    """Read data from XML file.

    Parameters
    ----------
    xml_file : str
        Path to XML file.

    Returns
    ----------
    peaks : list (tuple)
        List of tuples (residue, w1, w2, data_height).
    """
    tree = ET.parse(xml_file)
    root = tree.getroot()
    peaks = []

    for peak in root.findall('.//Peak2D'):
        residue = peak.get('annotation')
        w1 = peak.get('F1')
        w2 = peak.get('F2')
        data_height = peak.get('intensity')
        peaks.append((residue, w1, w2, data_height))

    return peaks


def write_list(peaks, xml_file):
    """Write LIST file.

    Parameters
    ----------
    peaks : list (tuple)
        List of tuples (residue, w1, w2, data_height).
    xml_file : str
        Path to XML file.

    Returns
    ----------
    None
    """
    list_file = f"{xml_file[:-4]}.list"
    with open(list_file, 'w') as file:
        file.write("Assignment\tw1\tw2\tData Height\n")
        for peak in peaks:
            file.write("    ".join(peak) + "\n")

    return None


def main():
    """Main program"""
    args = parse_arguments()
    peaks = parse_xml(args.xml_file)
    write_list(peaks, args.xml_file)

    return None


if __name__ == '__main__':
    main()
