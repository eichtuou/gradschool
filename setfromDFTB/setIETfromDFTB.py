"""This script generates IETsim input files from a DFTB conformation scan output.
It also generates submission scripts for each IETsim calculation, and an input
stream file to submit all the jobs at once.

Run as: setIETfromDFTB.py > suball.sh
"""

from typing import List, Tuple
import textwrap
import subprocess
import shutil as sh
import os

# -----------------USER INPUT SECTION---------------------!
CLUSTER = 'murgas'                # henry, murgas
QUEUE = ''                        # name of queue
MOL_COMPLEX = 'biCA_slab_'        # complex name
STEPS = '4000.0'                  # simulation steps
GEN_CUBE = False                  # generate cube file?
# --------------------------------------------------------!


def gen_submission_scripts(
        cluster: str,
        queue: str,
        conf: str,
        state: str) -> None:
    """Generate submission scripts based on cluster."""
    sub_file = f"subdynamics_{conf}"
    templates = {
        "henry": textwrap.dedent(f"""\
            #!/usr/bin/bash
            #BSUB -R "model != L5535"
            #BSUB -R span[ptile=8]
            #BSUB -R "mem>16100"
            #BSUB -q {queue}
            #BSUB -n 2
            #BSUB -W 96:00
            #BSUB -J {conf}_{state}
            #BSUB -o output
            #BSUB -e error

            echo jobid = $LSB_JOBID
            echo hosts = $LSB_HOSTS

            date
            dynamics {conf}.bind
            date
        """),
        'murgas': textwrap.dedent(f"""\
            #!/bin/bash
            #PBS -jeo
            #PBS -o output
            #PBS -e error
            #PBS -N {conf}_{state}
            #PBS -l pmem=2GB,nodes=1:ppn=1,walltime=300:00:00

            RUNDIR=$PBS_O_WORKDIR
            export RUNDIR
            cd $RUNDIR

            date
            dynamics {conf}.bind
            date
        """)
    }

    with open(sub_file, 'w') as file:
        file.write(templates[cluster])
    os.chmod(sub_file, 0o755)


def make_bind_sections(bindmode: str, steps: str,
                       gen_cube: bool) -> Tuple[str, str, str, str]:
    """Generate bottom of bind file depending on the complex."""
    cube_dynamics = "Cube\n\n" if gen_cube else ""
    dynamics = f"Dynamics\n0.1 {steps}\n\n"
    occupation = "Occupation\n865\n1,2-865\n\n" if 'biCA' in bindmode else "Occupation\n864\n1,2-864\n\n"

    if 'biCA' in bindmode:
        absorbing = textwrap.dedent(r"""\
            Absorbing
            432 0.100
            161, 162, 163, 164, 165, 166, 167, 168, 169, 170   \
            171, 172, 173, 174, 175, 176, 177, 178, 179, 180   \
            181, 182, 183, 184, 185, 186, 187, 643, 644, 645   \
            646, 647, 648, 649, 650, 651, 652, 653, 654, 655   \
            656, 657, 658, 659, 660, 661, 662, 663, 664, 665   \
            666, 667, 668, 669, 670, 671, 672, 673, 674, 675   \
            676, 677, 678, 679, 680, 681, 682, 683, 684, 685   \
            686, 687, 688, 689, 690, 691, 692, 693, 694, 695   \
            696, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583   \
            1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593   \
            1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603   \
            1604, 1605, 1606, 1607, 1608, 1609, 1610, 1791, 1792, 1793   \
            1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803   \
            1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813   \
            1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823   \
            1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833   \
            1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843   \
            1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853   \
            1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863   \
            1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 3494, 3495   \
            3496, 3497, 3498, 3499, 3500, 3501, 3502, 3503, 3504, 3505   \
            3506, 3507, 3508, 3509, 3510, 3511, 3512, 3513, 3514, 3515   \
            3516, 3517, 3518, 3519, 3520, 3521, 3522, 3523, 3524, 3525   \
            3526, 3527, 3528, 3529, 3530, 3531, 3532, 3533, 3534, 3535   \
            3536, 3537, 3538, 3539, 3540, 3541, 3542, 3543, 3544, 3545   \
            3546, 3547, 3548, 3549, 3550, 3551, 3552, 3553, 3554, 3555   \
            3556, 3557, 3558, 3559, 3560, 3561, 3562, 3563, 3564, 3565   \
            3926, 3927, 3928, 3929, 3930, 3931, 3932, 3933, 3934, 3935   \
            3936, 3937, 3938, 3939, 3940, 3941, 3942, 3943, 3944, 3945   \
            3946, 3947, 3948, 3949, 3950, 3951, 3952, 3953, 3954, 3955   \
            3956, 3957, 3958, 3959, 3960, 3961, 3962, 3963, 3964, 3965   \
            3966, 3967, 3968, 3969, 3970, 3971, 3972, 3973, 3974, 3975   \
            3976, 3977, 3978, 3979, 3980, 3981, 3982, 3983, 3984, 3985   \
            3986, 3987, 3988, 3989, 3990, 3991, 3992, 3993, 3994, 3995   \
            3996, 3997, 3998, 3999, 4000, 4001, 4002, 4003, 4004, 4005   \
            4006, 4007, 4008, 4009, 4010, 4011, 4012, 4013, 4014, 4015   \
            4016, 4017, 4018, 4019, 4020, 4021, 4022, 4023, 4024, 4025   \
            4026, 4027, 4028, 4029, 4030, 4031, 4032, 4033, 4034, 4035   \
            4036, 4037, 4038, 4039, 4040, 4041, 4042, 4043, 4044, 4045   \
            4046, 4047, 4048, 4049, 4050, 4051, 4052, 4053, 4054, 4055   \
            4056, 4057, 4058, 4059, 4060, 4061, 4062, 4063, 4064, 4065   \
            4066, 4067, 4068, 4069, 4070, 4071, 4072, 4073, 4074, 4075   \
            4076, 4077, 4078, 4079, 4080, 4081, 4082, 4083, 4084, 4085   \
            4086, 4087'

        """)

    if 'mono' in bindmode:
        absorbing = textwrap.dedent(r"""\
            Absorbing
            432 0.100
            1, 2, 3, 4, 5, 6, 7, 8, 9, 10   \
            11, 12, 13, 14, 15, 16, 17, 18, 19, 20   \
            21, 22, 23, 24, 25, 26, 27, 28, 29, 30   \
            31, 32, 33, 34, 35, 36, 393, 394, 395, 396   \
            397, 398, 399, 400, 401, 402, 403, 404, 405, 406   \
            407, 408, 409, 410, 411, 412, 413, 414, 415, 416   \
            417, 418, 419, 420, 421, 422, 423, 424, 425, 426   \
            427, 428, 609, 610, 611, 612, 613, 614, 615, 616   \
            617, 618, 619, 620, 621, 622, 623, 624, 625, 626   \
            627, 628, 629, 630, 631, 632, 633, 634, 635, 636   \
            637, 638, 639, 640, 641, 642, 643, 644, 645, 646   \
            647, 648, 649, 650, 651, 652, 653, 654, 655, 656   \
            657, 658, 659, 660, 661, 662, 663, 664, 665, 666   \
            667, 668, 669, 670, 671, 672, 673, 674, 675, 676   \
            677, 678, 679, 680, 1633, 1634, 1635, 1636, 1637, 1638   \
            1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648   \
            1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658   \
            1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668   \
            1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678   \
            1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688   \
            1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698   \
            1699, 1700, 1701, 1702, 1703, 1704, 2417, 2418, 2419, 2420   \
            2421, 2422, 2423, 2424, 2425, 2426, 2427, 2428, 2429, 2430   \
            2431, 2432, 2433, 2434, 2435, 2436, 2437, 2438, 2439, 2440   \
            2441, 2442, 2443, 2444, 2445, 2446, 2447, 2448, 2449, 2450   \
            2451, 2452, 2453, 2454, 2455, 2456, 2457, 2458, 2459, 2460   \
            2461, 2462, 2463, 2464, 2465, 2466, 2467, 2468, 2469, 2470   \
            2471, 2472, 2473, 2474, 2475, 2476, 2477, 2478, 2479, 2480   \
            2481, 2482, 2483, 2484, 2485, 2486, 2487, 2488, 2849, 2850   \
            2851, 2852, 2853, 2854, 2855, 2856, 2857, 2858, 2859, 2860   \
            2861, 2862, 2863, 2864, 2865, 2866, 2867, 2868, 2869, 2870   \
            2871, 2872, 2873, 2874, 2875, 2876, 2877, 2878, 2879, 2880   \
            2881, 2882, 2883, 2884, 2885, 2886, 2887, 2888, 2889, 2890   \
            2891, 2892, 2893, 2894, 2895, 2896, 2897, 2898, 2899, 2900   \
            2901, 2902, 2903, 2904, 2905, 2906, 2907, 2908, 2909, 2910   \
            2911, 2912, 2913, 2914, 2915, 2916, 2917, 2918, 2919, 2920   \
            2921, 2922, 2923, 2924, 2925, 2926, 2927, 2928, 2929, 2930   \
            2931, 2932, 2933, 2934, 2935, 2936, 2937, 2938, 2939, 2940   \
            2941, 2942, 2943, 2944, 2945, 2946, 2947, 2948, 2949, 2950   \
            2951, 2952, 2953, 2954, 2955, 2956, 2957, 2958, 2959, 2960   \
            2961, 2962, 2963, 2964, 2965, 2966, 2967, 2968, 2969, 2970   \
            2971, 2972, 2973, 2974, 2975, 2976, 2977, 2978, 2979, 2980   \
            2981, 2982, 2983, 2984, 2985, 2986, 2987, 2988, 2989, 2990   \
            2991, 2992'

        """)

    if 'dmono' in bindmode:
        absorbing = textwrap.dedent(r"""\
            Absorbing
            432 0.100
            161, 162, 163, 164, 165, 166, 167, 168, 169, 170   \
            171, 172, 173, 174, 175, 176, 177, 178, 179, 180   \
            181, 182, 183, 184, 185, 186, 187, 643, 644, 645   \
            646, 647, 648, 649, 650, 651, 652, 653, 654, 655   \
            656, 657, 658, 659, 660, 661, 662, 663, 664, 665   \
            666, 667, 668, 669, 670, 671, 672, 673, 674, 675   \
            676, 677, 678, 679, 680, 681, 682, 683, 684, 685   \
            686, 687, 688, 689, 690, 691, 692, 693, 694, 695   \
            696, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583   \
            1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593   \
            1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603   \
            1604, 1605, 1606, 1607, 1608, 1609, 1610, 1791, 1792, 1793   \
            1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803   \
            1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813   \
            1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823   \
            1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833   \
            1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843   \
            1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853   \
            1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863   \
            1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 3493, 3494   \
            3495, 3496, 3497, 3498, 3499, 3500, 3501, 3502, 3503, 3504   \
            3505, 3506, 3507, 3508, 3509, 3510, 3511, 3512, 3513, 3514   \
            3515, 3516, 3517, 3518, 3519, 3520, 3521, 3522, 3523, 3524   \
            3525, 3526, 3527, 3528, 3529, 3530, 3531, 3532, 3533, 3534   \
            3535, 3536, 3537, 3538, 3539, 3540, 3541, 3542, 3543, 3544   \
            3545, 3546, 3547, 3548, 3549, 3550, 3551, 3552, 3553, 3554   \
            3555, 3556, 3557, 3558, 3559, 3560, 3561, 3562, 3563, 3564   \
            3925, 3926, 3927, 3928, 3929, 3930, 3931, 3932, 3933, 3934   \
            3935, 3936, 3937, 3938, 3939, 3940, 3941, 3942, 3943, 3944   \
            3945, 3946, 3947, 3948, 3949, 3950, 3951, 3952, 3953, 3954   \
            3955, 3956, 3957, 3958, 3959, 3960, 3961, 3962, 3963, 3964   \
            3965, 3966, 3967, 3968, 3969, 3970, 3971, 3972, 3973, 3974   \
            3975, 3976, 3977, 3978, 3979, 3980, 3981, 3982, 3983, 3984   \
            3985, 3986, 3987, 3988, 3989, 3990, 3991, 3992, 3993, 3994   \
            3995, 3996, 3997, 3998, 3999, 4000, 4001, 4002, 4003, 4004   \
            4005, 4006, 4007, 4008, 4009, 4010, 4011, 4012, 4013, 4014   \
            4015, 4016, 4017, 4018, 4019, 4020, 4021, 4022, 4023, 4024   \
            4025, 4026, 4027, 4028, 4029, 4030, 4031, 4032, 4033, 4034   \
            4035, 4036, 4037, 4038, 4039, 4040, 4041, 4042, 4043, 4044   \
            4045, 4046, 4047, 4048, 4049, 4050, 4051, 4052, 4053, 4054   \
            4055, 4056, 4057, 4058, 4059, 4060, 4061, 4062, 4063, 4064   \
            4065, 4066, 4067, 4068, 4069, 4070, 4071, 4072, 4073, 4074   \
            4075, 4076, 4077, 4078, 4079, 4080, 4081, 4082, 4083, 4084   \
            4085, 4086\n\n'

        """)

    return cube_dynamics, dynamics, occupation, absorbing


def get_conformations(bindmode: str) -> List[str]:
    """Get list of conformations and rename *.dat files."""
    all_files = os.listdir(os.getcwd())
    conformations = [
        file.replace('tarj_', '').replace('_excitations', '').replace(
            bindmode, '').replace('.dat', '')
        for file in all_files if bindmode in file and '.dat' in file
    ]

    for file in all_files:
        if bindmode in file and '.dat' in file:
            newfile = file.replace('tarj_', '').replace('_excitations', '')
            subprocess.call(["mv", file, newfile])

    return conformations


def get_particle_states(
        conformations: List[str]) -> List[Tuple[int, List[str]]]:
    """Get particle states for each conformation."""
    conf_and_states = []

    for conformation in conformations:
        file_name = f"{conformation}.dat"
        if not os.path.exists(file_name):
            continue

        with open(file_name) as file:
            buffer = file.read().split('\n\n')[:-1]

        states = set(
            line.split()[2]
            for block in buffer
            for line in block.split('\n')
            if '->' in line
        )

        conf_and_states.append((int(conformation), list(states)))

    return conf_and_states


def gen_organize_files(
        bindmode: str, conf_and_states: List[Tuple[int, List[str]]],
        bottom_bind: Tuple[str, str, str, str], cluster: str, queue: str) -> None:
    """Create and organize files for each conformation and particle state."""
    master_dir = os.getcwd()

    for conf_id, states in conf_and_states:
        conf_dir = f"{bindmode}{conf_id}"
        os.mkdir(conf_dir)

        for ext in ['.com', '.dat', '.bind']:
            sh.move(f"{bindmode}{conf_id}{ext}", conf_dir)

        os.chdir(conf_dir)
        for state in states:
            state_dir = state
            os.mkdir(state_dir)
            sh.copy(f"{bindmode}{conf_id}.bind", state_dir)

            os.chdir(state_dir)
            with open(f"{bindmode}{conf_id}.bind", 'a') as file:
                file.write("\n".join(bottom_bind))
            gen_submission_scripts(cluster, queue, conf_dir, state)
            os.chdir("..")
        os.chdir(master_dir)


def main():
    """Main Program."""
    bind_sections = make_bind_sections(MOL_COMPLEX, STEPS, GEN_CUBE)
    conformations = get_conformations(MOL_COMPLEX)
    conf_and_states = get_particle_states(conformations)
    gen_organize_files(
        MOL_COMPLEX,
        conf_and_states,
        bind_sections,
        CLUSTER,
        QUEUE)


if __name__ == "__main__":
    main()
